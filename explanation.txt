class NeuralNetwork{
    constructor(neuronCounts){  
        // array -no.of neurons on a level
        this.levels=[];         
        //define levels
        for(let i=0;i<neuronCounts.length-1;i++){
            this.levels.push(new Level(
                neuronCounts[i],neuronCounts[i+1]
            ));
            //neuronCount ka arrayy h jisme no.of neurons store h like-4,6,4..
            //ek level pe ek upar(output) pe neurons hai
            //aur neeche bhi
            //therefore level me push kro neuroncount ka[i] aur [i+1]
        } 
    }

    static feedForward(givenInputs,network){
        let outputs=Level.feedForward(
            givenInputs,network.levels[0]); //calling first level to call its output
        for(let i=1;i<network.levels.length;i++){ //loop through remaining levels
            outputs=Level.feedForward(
                outputs,network.levels[i]);//previous level output to new level input
        }
        return outputs; //final output will tellif the car should move forward left or right 
    }
}

class Level{
    constructor(inputCount,outputCount){
        this.inputs = new Array(inputCount);
        this.outputs = new Array(outputCount);
        //each output has a bias, a value above which it will fire
        this.biases = new Array(outputCount);

        this.weights=[];
        //setting up weight(an empty array size of output because each input will have outpurCount number of weights)
        for(let i=0;i<inputCount;i++){
            this.weight[i] = new Array(outputCounts);

        }

        Level.#randomize(this);
    }

    static #randomize(level){
        // going through input output pair to set weight btw {-1,0,1}
        //a negative weight will tell don't turn that ways
        for(let i=0;i<level.inputs.length;i++){
            for(let j=0;j<level.outputs.length;j++){
                level.weights[i][j]=Math.random()*2-1;
            }
        //will explain soon
        for(let i=0;i<level.biases.length;i++){
            level.biases[i]=Math.random()*2-1;
        } 
    }

    static feedForward(givenInputs,level){
        for(let i=0;i<level.input,length;i++){

            //these value will read the sensors
            level.inputs[i]=givenInputs[i];
        }

        for(let i=0;i<level.outputs.length;i++){
            //calculate some value from input and weights
            let sum =0;
            for(let j=0;j<level.input.length;j++){
                sum+=level.inputs[j]*level.weights[j][i];
            }
            if(sum>level.biases[i]){
                level.outputs[i]=1;//turn it on
            }
            else{
                level.outputs[i]=0;
            }
        }
        return level.outputs;

    }
}